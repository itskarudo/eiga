#!/usr/bin/env bash

red="\033[1;31m"
reset="\033[0m"

movies_search_url="https://yts.mx/api/v2/list_movies.json?sort_by=download_count&limit=50"
movie_details_url="https://yts.mx/api/v2/movie_details.json"

log_error() {
  printf "${red}%s${reset}\n" "$@"
}

check_deps() {
  missing_deps=""
  for dep in jq curl fzf xdg-open; do
    command -v "$dep" >/dev/null || missing_deps="${missing_deps} ${dep}"
  done

  if [ -n "$missing_deps" ]; then
    for dep in $missing_deps; do
      log_error "$dep is not installed."
    done
    exit 1
  fi
}

usage() {
  printf "%s" "\
usage: eiga [options...]

Options:
    -m, --movies              Search in movie sources (yts.mx).
    -h, --help                Show this text and exit
"
  exit 1
}

parse_args() {

  [[ $# -ge 1 ]] || usage;

  while [[ "$1" ]]; do
    case "$1" in
      "-m" | "--movies") movies="on";;
      *) usage;;
    esac
    shift
  done
}

get_search_query() {
  printf '> '
  read -r search_query
}

send_request() {
  base_url="$1"
  shift 1

  curl -fsG "$base_url" -L "$@" --compressed

}

display_list() {
  printf '%s' "$@" | column -t -s $'\t' | fzf --reverse --cycle -d $'\|' --with-nth=2..
}

fetch_movies() {
  raw_response=$(send_request "$movies_search_url" --data-urlencode "query_term=$search_query")

  results_count=$(jq .data.movie_count <<< "$raw_response")

  if [[ $results_count -gt 0 ]]; then
    readarray -t results < <(jq -r '.data.movies[] | [.id, "M", .title, .year] | join("\t|")' <<< "$raw_response")
  fi

}

display_results() {

  [[ $movies = on ]] && fetch_movies

  if [ ${#results[@]} -eq 0 ]; then
    log_error "No results found."
    exit 1
  fi

  OLDIFS=$IFS
  IFS=$'\n'
  choice=$(display_list "${results[*]}")
  IFS=$OLDIFS

  if [ -z "$choice" ]; then
    log_error "aborted."
    exit 1
  fi

}

get_choice_category() {
  local category
  IFS=$'|' read -r _ category _ <<< "$choice"
  printf '%s' "${category%%" "*}"
}

get_choice_id() {
  local id
  IFS=$'|' read -r id _ <<< "$choice"
  printf '%s' "${id%%" "*}"
}

fetch_movie_links() {
  raw_response=$(send_request "$movie_details_url" --data-urlencode "movie_id=$(get_choice_id)")

  readarray -t torrents < <(jq -r '.data.movie.torrents[] | [.url, .quality, .type, .size] | join("\t|")' <<< "$raw_response")

}

get_movie_torrent_link() {
  fetch_movie_links

  OLDIFS=$IFS
  IFS=$'\n'
  choice=$(display_list "${torrents[*]}")
  IFS=$OLDIFS

  if [ -z "$choice" ]; then
    log_error "aborted."
    exit 1
  fi

  local link
  IFS=$'|' read  -r link _ <<< "$choice"
  printf '%s' "${link%%" "*}"
}


extract_torrent_link() {
  category=$(get_choice_category)

  [[ $category = M ]] && get_movie_torrent_link
}

download_and_open_torrent() {
  filename=$(mktemp --suffix=.torrent)
  send_request "$@" -o "$filename"
  xdg-open "$filename" &>/dev/null
}

main() {

  check_deps

  parse_args "$@"

  get_search_query

  display_results

  download_and_open_torrent "$(extract_torrent_link)"

}

main "$@"
