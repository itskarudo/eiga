#!/usr/bin/env bash

red="\033[1;31m"
reset="\033[0m"

movies_search_url="https://yts.mx/api/v2/list_movies.json?sort_by=download_count&limit=50"
movie_details_url="https://yts.mx/api/v2/movie_details.json"

log_error() {
  printf "${red}%s${reset}\n" "$@"
}

check_deps() {
  missing_deps=""
  for dep in jq curl fzf xdg-open; do
    command -v "$dep" >/dev/null || missing_deps="${missing_deps} ${dep}"
  done

  if [ -n "$missing_deps" ]; then
    for dep in $missing_deps; do
      log_error "$dep is not installed."
    done
    exit 1
  fi
}

get_search_query() {
  printf '> '
  read -r search_query
}

send_request() {
  base_url="$1"
  shift 1

  curl -fsG "$base_url" -L "$@" --compressed

}

display_list() {
  fzf --reverse --cycle -d "=" --with-nth=2 <<< "$@"
}

fetch_movies() {
  raw_response=$(send_request "$movies_search_url" --data-urlencode "query_term=$search_query")

  results_count=$(jq .data.movie_count <<< "$raw_response")

  if [[ $results_count -gt 0 ]]; then
    readarray -t results < <(jq -r '.data.movies | map("\(.id|tostring)=\(.title) (\(.year|tostring))")[]' <<< "$raw_response")
  fi

}

display_movies() {

  fetch_movies

  if [ ${#results[@]} -eq 0 ]; then
    log_error "Could not find any movies."
    exit 1
  fi

  OLDIFS=$IFS
  IFS=$'\n'
  choice=$(display_list "${results[*]}")
  IFS=$OLDIFS

  if [ -z "$choice" ]; then
    log_error "aborted."
    exit 1
  fi

  IFS='=' read -r choice_id _ <<< "$choice"
}

fetch_download_links() {
  raw_response=$(send_request "$movie_details_url" --data-urlencode "movie_id=$choice_id")

  readarray -t torrents < <(jq -r '.data.movie.torrents | map("\(.url)=\(.type) \(.quality) (\(.size))")[]' <<< "$raw_response")

}

display_download_links() {
  fetch_download_links

  OLDIFS=$IFS
  IFS=$'\n'
  choice=$(display_list "${torrents[*]}")
  IFS=$OLDIFS

  if [ -z "$choice" ]; then
    log_error "aborted."
    exit 1
  fi

  IFS='=' read -r torrent_url _ <<< "$choice"
}

download_and_open_torrent() {
  filename=$(mktemp --suffix=.torrent)
  send_request "$torrent_url" -o "$filename"
  xdg-open "$filename" &>/dev/null
}

main() {

  check_deps

  get_search_query

  display_movies

  display_download_links

  download_and_open_torrent

}

main "$@"
