#!/usr/bin/env bash

red="\033[1;31m"
reset="\033[0m"

movies_search_url="https://yts.mx/api/v2/list_movies.json?sort_by=download_count&limit=50"
movie_details_url="https://yts.mx/api/v2/movie_details.json"

shows_search_url="https://1337x.to/category-search/"
show_details_url="https://1337x.to/torrent/"

anime_search_url="https://nyaa.si?s=seeders&o=desc&c=1_0"
anime_torrent_base_url="https://nyaa.si/download"

results=()
pages=1

log_error() {
  printf "${red}%s${reset}\n" "$@"
}

check_deps() {
  missing_deps=""
  for dep in jq curl fzf xdg-open; do
    command -v "$dep" >/dev/null || missing_deps="${missing_deps} ${dep}"
  done

  if [ -n "$missing_deps" ]; then
    for dep in $missing_deps; do
      log_error "$dep is not installed."
    done
    exit 1
  fi
}

urlencode() {
  local LC_ALL=C
  for (( i = 0; i < ${#1}; i++ )); do
    : "${1:i:1}"
    case "$_" in
      [a-zA-Z0-9.~_-])
        printf '%s' "$_";;
      *)
        printf '%%%02X' "'$_";;
    esac
  done
}

usage() {
  printf "%s" "\
usage: eiga [options...]

Options:
    -m, --movies              Search in movie sources (yts.mx)
    -s, --shows               Search in TV shows sources (1337x)
    -a, --anime               Search in anime sources (nyaa.si)
    -p, --pages               Specify number of pages to fetch.
    -h, --help                Show this text and exit.
"
  exit 1
}

parse_args() {

  [[ $# -ge 1 ]] || usage;

  while [[ "$1" ]]; do
    case "$1" in
      "-m" | "--movies") movies="on";;
      "-s" | "--shows") shows="on";;
      "-a" | "--anime") anime="on";;
      "-p" | "--pages") pages=$2; shift ;;
      *) usage;;
    esac
    shift
  done
}

get_search_query() {
  printf '> '
  read -r search_query
}

send_request() {
  base_url="$1"
  shift 1

  curl -fsG "$base_url" -L "$@" --compressed

}

display_list() {
  printf '%s' "$@" | column -t -s $'\t' | fzf --reverse --cycle -d $'\|' --with-nth=2..
}

fetch_movies() {
  for ((i=0;i<pages;i++)); do
    raw_response=$(send_request "$movies_search_url" --data-urlencode "query_term=$search_query" --data-urlencode "page=$i")

    jq -e '.data|has("movies")' <<< "$raw_response" &>/dev/null || break

    results+=(
    "$(jq -r '.data.movies[] | [.id, "M", .title + " (" + (.year|tostring) + ")"] | join("\t|")' <<< "$raw_response")"
    )
  done

}

fetch_shows() {
  encoded_query=$(urlencode "$search_query")

  for ((i=0;i<pages;i++)); do
    raw_response=$(send_request "$shows_search_url$encoded_query/TV/$i/" |
         grep -o '<a href="/torrent/[0-9]*/.*/">.*</a>' |
          sed -e 's/.*torrent\/\(.*\)\/">\(.*\)<\/a>/\1\t|S\t|\2/'
      )

      [[ -n $raw_response ]] || break
      results+=("$raw_response")
  done
}

fetch_anime() {
  for ((i=0;i<pages;i++)); do
    raw_response=$(send_request "$anime_search_url" --data-urlencode "q=$search_query" --data-urlencode "p=$i" |
        grep '<a href="/view/[0-9]*" title=".*"' |
        sed -e 's/.*view\/\([0-9]*\)" title="\([^"]*\)".*/\1\t|A\t|\2/'
      )

    [[ -n $raw_response ]] || break
    results+=("$raw_response")
  done

}

display_results() {

  [[ $movies = on ]] && fetch_movies
  [[ $shows = on ]] && fetch_shows
  [[ $anime = on ]] && fetch_anime

  if [ ${#results[@]} -eq 0 ]; then
    log_error "No results found."
    exit 1
  fi

  OLDIFS=$IFS
  IFS=$'\n'
  choice=$(display_list "${results[*]}")
  IFS=$OLDIFS

  if [ -z "$choice" ]; then
    log_error "aborted."
    exit 1
  fi

}

get_choice_category() {
  local category
  IFS=$'|' read -r _ category _ <<< "$choice"
  printf '%s' "${category%%" "*}"
}

get_choice_id() {
  local id
  IFS=$'|' read -r id _ <<< "$choice"
  printf '%s' "${id%%" "*}"
}

fetch_movie_links() {
  raw_response=$(send_request "$movie_details_url" --data-urlencode "movie_id=$(get_choice_id)")

  readarray -t torrents < <(jq -r '.data.movie.torrents[] | [.url, .quality, .type, .size] | join("\t|")' <<< "$raw_response")

}

get_movie_torrent_link() {
  fetch_movie_links

  OLDIFS=$IFS
  IFS=$'\n'
  choice=$(display_list "${torrents[*]}")
  IFS=$OLDIFS

  if [ -z "$choice" ]; then
    log_error "aborted."
    exit 1
  fi

  local link
  IFS=$'|' read  -r link _ <<< "$choice"
  printf '%s' "${link%%" "*}"
}

get_show_torrent_link() {
  send_request "$show_details_url$(get_choice_id)/" |
    grep -o 'http://itorrents.org/torrent/.*\.torrent'
}

get_anime_torrent_link() {
  printf '%s' "${anime_torrent_base_url}/$(get_choice_id).torrent"
}


extract_torrent_link() {
  category=$(get_choice_category)

  case $category in
    M) get_movie_torrent_link;;
    S) get_show_torrent_link;;
    A) get_anime_torrent_link;;
  esac

}

download_and_open_torrent() {
  filename=$(mktemp --suffix=.torrent)
  send_request "$@" -o "$filename"
  xdg-open "$filename" &>/dev/null & disown
}

main() {

  check_deps

  parse_args "$@"

  get_search_query

  display_results

  download_and_open_torrent "$(extract_torrent_link)"

}

main "$@"
